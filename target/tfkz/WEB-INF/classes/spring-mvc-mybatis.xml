<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd"
	default-lazy-init="true"><!-- 自动扫描dao和service包(自动注入) -->
	<context:component-scan base-package="org.takinframework.core.web.*" />
	<context:component-scan base-package="org.takinframework.core.common.dao.*" />
	<context:component-scan base-package="org.takinframework.core.common.service.*" />
	<context:component-scan base-package="org.takinframework.web.*" />

	<!-- 加载service,此时要排除要controller,因为controller已经spring-mvc中加载过了 -->
	<context:component-scan base-package="org.takinframework.web.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 引入属性文件 -->
	<context:property-placeholder location="classpath:dbconfig.properties" />

	<bean id="dataSource_c3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass" value="${diver_name}"></property>
		<property name="jdbcUrl" value="${remoteUrl}"></property>
		<property name="user" value="${username}"></property>
		<property name="password" value="${password}"></property>
		<property name="acquireIncrement" value="${c3p0.acquireIncrement}"></property>
		<property name="initialPoolSize" value="${c3p0.initialPoolSize}"></property>
		<property name="maxIdleTime" value="${c3p0.maxIdleTime}"></property>
		<property name="maxPoolSize" value="${c3p0.maxPoolSize}"></property>
		<property name="minPoolSize" value="${c3p0.minPoolSize}"></property>

		<property name="acquireRetryDelay" value="1000"></property>
		<property name="acquireRetryAttempts" value="60"></property>
		<property name="breakAfterAcquireFailure" value="false"></property>
	</bean>
	<!-- 本地bonecp数据源 -->
	<bean id="dataSource_BoneCP" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${diver_name}" />
		<!-- 相应驱动的jdbcUrl,你懂的 -->
		<property name="jdbcUrl" value="${url}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="${idleMaxAge}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="${statementsCacheSize}" />
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="${releaseHelperThreads}" />
		<property name="disableConnectionTracking" value="${disableConnectionTracking}" />
	</bean>
	<!-- 远程bonecp数据源 -->
	<bean id="dataSource_BoneCP_Remot" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<!-- 数据库驱动 -->
		<property name="driverClass" value="${diver_name}" />
		<!-- 相应驱动的jdbcUrl,你懂的 -->
		<property name="jdbcUrl" value="${remoteUrl}" />
		<!-- 数据库的用户名 -->
		<property name="username" value="${username}" />
		<!-- 数据库的密码 -->
		<property name="password" value="${password}" />
		<!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 -->
		<property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />
		<!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 -->
		<property name="idleMaxAge" value="${idleMaxAge}" />
		<!-- 每个分区最大的连接数 -->
		<property name="maxConnectionsPerPartition" value="${maxConnectionsPerPartition}" />
		<!-- 每个分区最小的连接数 -->
		<property name="minConnectionsPerPartition" value="${minConnectionsPerPartition}" />
		<!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定 -->
		<property name="partitionCount" value="${partitionCount}" />
		<!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->
		<property name="acquireIncrement" value="${acquireIncrement}" />
		<!-- 缓存prepared statements的大小，默认值：0 -->
		<property name="statementsCacheSize" value="${statementsCacheSize}" />
		<!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->
		<property name="releaseHelperThreads" value="${releaseHelperThreads}" />
		<property name="disableConnectionTracking" value="${disableConnectionTracking}" />
	</bean>

	<!-- 数据源配置, 使用 BoneCP 数据库连接池 -->
	<bean id="dataSource_jweb1" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass -->
		<property name="driverClassName" value="${diver_name}" />

		<!-- 基本属性 url、user、password -->
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.minIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="60000" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="300000" />

		<property name="validationQuery" value="SELECT 'x'" />
		<property name="testWhileIdle" value="true" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小（Oracle使用） <property name="poolPreparedStatements" 
			value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" 
			value="20" /> -->

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>

	<!-- 数据源集合 -->
	<bean id="dataSource"
		class="org.takinframework.core.extend.datasource.DynamicDataSource">
		<property name="targetDataSources">
			<map key-type="org.takinframework.core.extend.datasource.DataSourceType">
				<entry key="dataSource1" value-ref="dataSource_BoneCP" />
				<entry key="dataSourceRemot" value-ref="dataSource_BoneCP" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="dataSource_BoneCP" />
	</bean>

	<!-- JDBC配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		lazy-init="false">
		<property name="dataSource" ref="dataSource" />
		<property name="fetchSize" value="50" />
	</bean>


	<!-- ***************事务配置************** -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- JSR303 Validator定义 -->
	<bean id="validator"
		class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

	<!-- MyBatis begin -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath:/mappings/**/*.xml" />
		<!-- <property name="mapperLocations" value="classpath:/mappings/${jdbc.dbType}/**/*.xml"/> -->
		<property name="configLocation" value="classpath:/mybatis-config.xml"></property>
	</bean>

	<bean id="mybatisBaseDao" class="org.takinframework.core.common.dao.impl.MybatisBaseDaoImpl">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<property name="basePackage" value="org.takinframework.web.*" />
		<property name="annotationClass"
			value="org.takinframework.core.common.dao.annotation.MyBatisDao"></property>
	</bean>
	<!-- MyBatis end -->
</beans>